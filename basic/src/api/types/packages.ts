/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export type Error = {
  /**
   * Error type.
   */
  type?: string;
  /**
   * Error message.
   */
  message?: string;
};
export type PackageResponse = {
  /**
   * The `packagePath` from the request, or the latest versioned path of the package if no version was specified.
   */
  packagePath?: string;
  /**
   * The languages contained in the package.
   */
  languages?: Language[];
  /**
   * The price procedures contained in the package.
   */
  priceProcedures?: PriceProcedure[];
};
export type ProductsResponse = {
  /**
   * The products in the requested package.
   */
  products?: Product[];
  /**
   * The `packagePath` from the request, or the latest versioned path of
   * the package if no version was specified.
   */
  packagePath?: string;
};
export type ProductResponse = {
  /**
   * The ID of the requested product.
   */
  id?: string;
  /**
   * The `packagePath` from the request, or the latest versioned path of
   * the package if no version was specified.
   */
  packagePath?: string;
  /**
   * The product's variables. Each variable has a `type` which determines
   * the properties available on the variable.
   */
  variables?: Variable[];
  /**
   * The product's available views.
   */
  views?: View[];
};
export type Variable = {
  /**
   * The variable ID.
   */
  id?: string;
  /**
   * The variable type.
   */
  type?: "string" | "number" | "boolean" | "datetime";
  /**
   * Idicates whether all the values that this variable can have are known.
   */
  isEnumerated?: boolean;
};
export type BooleanVariable = Variable & { [key: string]: any };
export type StringVariable = Variable & {
  /**
   * A collection of strings representing the values that
   * can be assigned to the variable during configuration.
   */
  values?: string[];
  /**
   * Indicates whether multiple values can be assigned to the variable
   * simultaneously during configuration.
   */
  isMultiValued?: boolean;
};
export type NumberVariable = Variable & {
  /**
   * Minimum value the number can be set to during configuration.
   * This property is a string to support a higher precision than
   * JavaScript allows.
   */
  min: string;
  /**
   * Maximum value the number can be set to during configuration.
   * This property is a string to support a higher precision than
   * JavaScript allows.
   */
  max: string;
  /**
   * The number of decimal places supported.
   */
  scale: number;
};
export type DateTimeVariable = Variable & {
  /**
   * Minimum value the date can be set to during configuration.
   * Follows the ISO 8601 format.
   */
  min: string;
  /**
   * Maximum value the date can be set to during configuration.
   * Follows the ISO 8601 format.
   */
  max: string;
};
export type Language = {
  /**
   * The language ID. Typically, this is an ISO 639-1 language code,
   * though this is not enforced. For example, `EN` for English.
   */
  id?: string;
  /**
   * The language name. For example, `English`.
   */
  name?: string;
  /**
   * Indicates whether this is the default language.
   */
  default?: boolean;
  /**
   * The ID of the fallback language used when translations are missing.
   */
  fallback?: string;
};
export type View = {
  /**
   * The view ID. Used when configuring products through the Configuration API.
   */
  id?: string;
  /**
   * Indicates whether this is the default view for the product.
   */
  default?: boolean;
};
export type PriceProcedure = {
  /**
   * The price procedure ID. Used when pricing products through the Configuration API.
   */
  id?: string;
  /**
   * Indicates whether this is the default price procedure in the package.
   */
  default?: boolean;
};
export type Product = {
  /**
   * The product ID.
   */
  id?: string;
};

export function isStringVariable(t: Variable): t is StringVariable {
  return t.type === "string";
}
export function isNumberVariable(t: Variable): t is NumberVariable {
  return t.type === "number";
}
export function isBooleanVariable(t: Variable): t is BooleanVariable {
  return t.type === "boolean";
}
export function isDateTimeVariable(t: Variable): t is DateTimeVariable {
  return t.type === "datetime";
}
